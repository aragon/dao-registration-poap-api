// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "darwin", "linux-musl", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     Int                      @id @default(autoincrement())
  address                String                   @unique @db.Citext
  isAdmin                Boolean                  @default(false)
  poapClaimCodes         PoapClaimCode[]
  pendingDAORegistrySync PendingDAORegistrySync[]
}

model PoapEvent {
  id         Int             @id @default(autoincrement())
  externalId Int             @unique
  secretCode String
  image      String?
  createdAt  DateTime        @default(now())
  expiresAt  DateTime
  claimCodes PoapClaimCode[]
}

model PendingDAORegistrySync {
  id         Int      @id @default(autoincrement())
  daoAddress String   @unique @db.Citext
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
  user       User?    @relation(fields: [userId], references: [id])
  userId     Int?

  @@index([userId], type: Hash)
}

enum PoapClaimCodeStatus {
  ASSIGNED
  MINTED
  ERROR
  UNASSIGNED
}

model PoapClaimCode {
  id         Int                 @id @default(autoincrement())
  event      PoapEvent           @relation(fields: [eventId], references: [id])
  eventId    Int
  qrHash     String              @unique
  createdAt  DateTime            @default(now())
  updatedAt  DateTime            @updatedAt
  user       User?               @relation(fields: [userId], references: [id])
  userId     Int?
  status     PoapClaimCodeStatus @default(UNASSIGNED)
  daoAddress String?             @unique @db.Citext

  @@index([eventId], type: Hash)
  @@index([userId], type: Hash)
}

model PoapAuth {
  id        Int      @id @default(autoincrement())
  authToken String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}
