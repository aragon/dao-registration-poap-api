---
name: api-build

on:
  workflow_dispatch:
  push:
    branches:
      #- develop
      - test
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
  pull_request:
    branches:
      - main

jobs:
  setup-and-build:
    runs-on: ubuntu-latest
    outputs:
      ENVVAR_TAG_VALUE: ${{ steps.vars1.outputs.TAG_VALUE }}
    steps:
      - name: Get Github vars
        id: vars1
        run: |
          echo "TAG_VALUE=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_OUTPUT

      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{ steps.vars1.outputs.TAG_VALUE }}

      - name: Set up NodeJS
        uses: actions/setup-node@v3
        with:
          node-version: 16.x
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Run e2e tests
        if: github.ref == 'refs/heads/test'
        run: npm run test:e2e

  docker-release:
    runs-on: ubuntu-latest
    needs:
      - setup-and-build
    #if: contains(github.ref, 'refs/tags/dev/v')
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          #ref: ${{ steps.vars1.outputs.TAG_VALUE }}
          ref: ${{ needs.setup-and-build.outputs.ENVVAR_TAG_VALUE }}

      - name: Get Git short commit hash
        id: vars2
        run: echo "SHA_SHORT=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}      ## i.e. ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Get Docker metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          #images: ghcr.io/aragon/dao-registration-poap-api
          images: ghcr.io/${{ github.repository }}
          flavor: |
            latest=${{ github.ref == 'refs/heads/main' }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value={{sha}},enable=${{ github.ref_type != 'tag' }}
            #type=semver,pattern={{major}}
            #type=sha
            #type=sha,event=branch,prefix={{branch}}-,format=short

      # - name: Build and Export to GitHub Container Registry
      #   uses: docker/build-push-action@v4
      #   with:
      #     context: .
      #     file: ./Dockerfile
      #     load: true
      #     build-args: |
      #       COMMIT_SHA=${{ steps.vars2.outputs.SHA_SHORT }}
      #       NODE_ENV=develop
      #     tags: ${{ steps.meta.outputs.tags }}
      #     labels: ${{ steps.meta.outputs.labels }}
      #     cache-from: type=gha
      #     cache-to: type=gha,mode=max

      # - name: Test Docker image before pushing it
      #   run: |
      #     docker run --rm ${{ steps.meta.outputs.tags }}

      - name: Build and Push to GitHub Container Registry
        uses: docker/build-push-action@v4
        #if: github.ref == 'refs/heads/develop'
        with:
          context: .
          #target: production
          file: ./Dockerfile
          platforms: linux/amd64
          build-args: |
            COMMIT_SHA=${{ steps.vars2.outputs.SHA_SHORT }}
            NODE_ENV=develop
          #push: true
          #push: ${{ github.event_name != 'pull_request' }}
          #push: ${{ github.event.base_ref == 'refs/heads/main' && github.ref_type == 'tag' && !startsWith(github.ref, 'refs/tags/v0.')}}
          #push: ${{ github.event.base_ref == 'refs/heads/develop' && github.ref_type == 'tag' && !startsWith(github.ref, 'refs/tags/v')}}
          #push: ${{ github.ref == 'refs/heads/develop' && github.ref_type == 'tag' && !startsWith(github.ref, 'refs/tags/v')}}
          push: ${{ github.ref_type == 'tag' && startsWith(github.ref, 'refs/tags/v')}}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
